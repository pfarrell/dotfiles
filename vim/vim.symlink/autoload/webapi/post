function! webapi#http#post(url, ...)
  let postdata = a:0 > 0 ? a:000[0] : {}
  let headdata = a:0 > 1 ? a:000[1] : {}
  let method = a:0 > 2 ? a:000[2] : "POST"
  let follow = a:0 > 3 ? a:000[3] : 1
  let url = a:url
  if type(postdata) == 4
    let postdatastr = webapi#http#encodeURI(postdata)
  else
    let postdatastr = postdata
  endif
  let file = tempname()
  if executable('curl')
    let command = printf('curl %s -s -k -i -X %s', (follow ? '-L' : ''), len(method) ? method : 'POST')
    let quote = &shellxquote == '"' ?  "'" : '"'
    for key in keys(headdata)
      if has('win32')
        let command .= " -H " . quote . key . ": " . substitute(headdata[key], '"', '"""', 'g') . quote
      else
        let command .= " -H " . quote . key . ": " . headdata[key] . quote
      endif
    endfor
    let command .= " ".quote.url.quote
    call writefile(split(postdatastr, "\n"), file, "b")
    let res = s:system(command . " --data-binary @" . quote.file.quote)
  elseif executable('wget')
    let command = printf('wget -O- --save-headers --server-response -q %s', follow ? '-L' : '')
    let headdata['X-HTTP-Method-Override'] = method
    let quote = &shellxquote == '"' ?  "'" : '"'
    for key in keys(headdata)
      if has('win32')
        let command .= " --header=" . quote . key . ": " . substitute(headdata[key], '"', '"""', 'g') . quote
      else
        let command .= " --header=" . quote . key . ": " . headdata[key] . quote
      endif
    endfor
    let command .= " ".quote.url.quote
    call writefile(split(postdatastr, "\n"), file, "b")
    let res = s:system(command . " --post-data @" . quote.file.quote)
  else
    throw "require `curl` or `wget` command"
  endif
  call delete(file)
  if follow != 0
    while res =~ '^HTTP/1.\d 3' || res =~ '^HTTP/1\.\d 200 Connection established' || res =~ '^HTTP/1\.\d 100 Continue'
      let pos = stridx(res, "\r\n\r\n")
      if pos != -1
        let res = res[pos+4:]
      else
        let pos = stridx(res, "\n\n")
        let res = res[pos+2:]
      endif
    endwhile
  endif
  let pos = stridx(res, "\r\n\r\n")
  if pos != -1
    let content = res[pos+4:]
  else
    let pos = stridx(res, "\n\n")
    let content = res[pos+2:]
  endif
  return {
  \ "header" : split(res[:pos-1], '\r\?\n'),
  \ "content" : content
  \}
endfunction
